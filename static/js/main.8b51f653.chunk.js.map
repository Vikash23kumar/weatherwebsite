{"version":3,"sources":["Components/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["Weather","date","Date","toDateString","time","toLocaleTimeString","useState","ctime","setCtime","city","setCity","latitude","setLatitude","longitude","setLongitude","currentLocation","setCurrentLocation","search","setSearch","country","setCountry","visibility","setVisibility","isAllow","setIsAllow","submit","setSubmit","navigator","geolocation","getCurrentPosition","position","coords","useEffect","a","url","fetch","response","json","responseLocation","locality","fetchLocationApi","onSubmit","e","preventDefault","searchUrl","resJson","main","sys","setInterval","currentLocationUrl","fetchByLocation","currDate","getHours","greeting","cssStyle","color","className","class","type","placeholder","value","onChange","event","target","style","temp","temp_min","temp_max","feels_like","pressure","humidity","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8b51f653.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nconst Weather = () => {\r\n  let date = new Date().toDateString();\r\n  let time = new Date().toLocaleTimeString();\r\n  const [ctime, setCtime] = useState(time);\r\n  const [city, setCity] = useState(null);\r\n  const [latitude, setLatitude] = useState(null);\r\n  const [longitude, setLongitude] = useState(null);\r\n  const [currentLocation, setCurrentLocation] = useState(null);\r\n  const [search, setSearch] = useState();\r\n  const [country, setCountry] = useState(null);\r\n  const [visibility, setVisibility] = useState();\r\n  const [isAllow, setIsAllow] = useState(true);\r\n  const [submit, setSubmit] = useState(\"\");\r\n  // const [sunrise, setSunrise] = useState(null);\r\n  // const [sunset, setSunset] = useState(null);\r\n  // console.log(\"Location\", currentLocation);\r\n  navigator.geolocation.getCurrentPosition((position) => {\r\n    if (position) {\r\n      setIsAllow(true);\r\n    }\r\n    setLatitude(position.coords.latitude);\r\n    setLongitude(position.coords.longitude);\r\n    // console.log(\"Position\", position);\r\n  });\r\n\r\n  useEffect(() => {\r\n    const fetchLocationApi = async () => {\r\n      const url = `https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${latitude}&longitude=${longitude}&localityLanguage=en`;\r\n      const response = await fetch(url);\r\n      const responseLocation = await response.json();\r\n      setCurrentLocation(responseLocation.locality);\r\n    };\r\n    fetchLocationApi();\r\n  }, [isAllow]);\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const searchUrl = `http://api.openweathermap.org/data/2.5/weather?q=${search}&units=metric&appid=1be3ada851b2e15493b2e7fefda37188`;\r\n    const response = await fetch(searchUrl);\r\n    const resJson = await response.json();\r\n    setCity(resJson.main);\r\n    setCountry(resJson.sys);\r\n    setVisibility(resJson.visibility);\r\n    // setSearch(search);\r\n    setSubmit(search);\r\n  };\r\n\r\n  const UpdateTime = () => {\r\n    time = new Date().toLocaleTimeString();\r\n    setCtime(time);\r\n  };\r\n\r\n  setInterval(UpdateTime, 1000);\r\n\r\n  useEffect(() => {\r\n    const fetchByLocation = async () => {\r\n      const currentLocationUrl = `http://api.openweathermap.org/data/2.5/weather?q=${currentLocation}&units=metric&appid=1be3ada851b2e15493b2e7fefda37188`;\r\n      const response = await fetch(currentLocationUrl);\r\n      const resJson = await response.json();\r\n      setCity(resJson.main);\r\n      setCountry(resJson.sys);\r\n      setVisibility(resJson.visibility);\r\n    };\r\n    fetchByLocation();\r\n  }, [currentLocation]);\r\n\r\n  let curDate = new Date();\r\n  let currDate = curDate.getHours();\r\n  let greeting = \"\";\r\n\r\n  const cssStyle = {};\r\n\r\n  if (currDate >= 1 && currDate < 12) {\r\n    greeting = \"Good Morning\";\r\n    cssStyle.color = \"green\";\r\n  } else if (currDate >= 12 && currDate < 16) {\r\n    greeting = \"Good Afternoon\";\r\n    cssStyle.color = \"orange\";\r\n  } else {\r\n    greeting = \"Good Evening\";\r\n    cssStyle.color = \"black\";\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"row\">\r\n        <div className=\"col-auto m-auto\">\r\n          <div className=\"box\">\r\n            <div className=\"inputData\">\r\n              <form\r\n                class=\"d-flex mt-2\"\r\n                onSubmit={(e) => {\r\n                  onSubmit(e);\r\n                }}\r\n              >\r\n                <input\r\n                  type=\"search\"\r\n                  className=\"inputField text-center\"\r\n                  placeholder=\"Enter City Name\"\r\n                  value={search}\r\n                  onChange={(event) => {\r\n                    setSearch(event.target.value);\r\n                  }}\r\n                />\r\n                <button className=\"btn btn-primary col-auto m-auto\">\r\n                  Search\r\n                </button>\r\n              </form>\r\n            </div>\r\n\r\n            {/* <div>Latitude is {latitude}</div>\r\n            <div>Longitude is {longitude}</div>\r\n            <div>Current Location is {currentLocation}</div> */}\r\n\r\n            <div className=\"mt-2\">\r\n              <h4 className=\"atert alert-warning text-center\">\r\n                <span style={cssStyle}>{greeting}</span>\r\n              </h4>\r\n            </div>\r\n\r\n            <div className=\"text-center\">\r\n              <h3>{date}</h3>\r\n              <h3>{ctime}</h3>\r\n            </div>\r\n\r\n            {!city || !country ? (\r\n              <p className=\"alert text-center\" style={{ color: \"red\" }}>\r\n                <b>No Data Found</b>\r\n              </p>\r\n            ) : (\r\n              <>\r\n                <div className=\"info\">\r\n                  <h6 className=\"location\">\r\n                    <i className=\"fas fa-street-view\"></i>\r\n                    {!search ? (\r\n                      <>\r\n                        <div>\r\n                          {currentLocation}, {country.country}\r\n                        </div>\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <div>\r\n                          {submit}, {country.country}\r\n                        </div>\r\n                      </>\r\n                    )}\r\n                  </h6>\r\n                  <h1 className=\"temp\">{city.temp}째Cel</h1>\r\n                  <h3 className=\"tempmin_max\">\r\n                    Min Temp : {city.temp_min}째Cel | Max Temp : {city.temp_max}\r\n                    째Cel\r\n                  </h3>\r\n                  <h3 className=\"tempmin_max\">\r\n                    Temp feel : {city.feels_like}째Cel\r\n                  </h3>\r\n                  <h3 className=\"tempmin_max\">Pressure : {city.pressure} mb</h3>\r\n                  <h3 className=\"tempmin_max\">Humidity : {city.humidity}%</h3>\r\n                  <h3 className=\"tempmin_max\">Visibility : {visibility} m</h3>\r\n                  {/* <h3 className=\"tempmin_max\">\r\n                    Sunrise: {sunrise} AM | Sunset: {sunset} PM\r\n                  </h3> */}\r\n                </div>\r\n                <div className=\"wave -one\"></div>\r\n                <div className=\"wave -two\"></div>\r\n                <div className=\"wave -three\"></div>\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","import React from \"react\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n// import Location from \"./Components/Location\";\nimport Weather from \"./Components/Weather\";\n\nfunction App() {\n  return (\n    <>\n      <Weather />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\nreportWebVitals();\n"],"sourceRoot":""}